<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\Microsoft.CSharp.dll" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Newtonsoft.Json.dll" #>
<#@ import namespace="System.Dynamic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>

<#@ output extension=".cs" #>
<#
	var serviceProvider = this.Host as IServiceProvider;
	var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
	var solutionDir = dte.Solution.FileName;
	var path = Path.GetDirectoryName(solutionDir) + "\\Locust\\Library\\Locust.AspNet.Identity";
	var configContent = System.IO.File.ReadAllText(path + "\\config.json");

	dynamic config = JsonConvert.DeserializeObject(configContent);
#>
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin;
using Microsoft.Owin.Security;
using Locust.AspNet.Identity.Models;

namespace Locust.AspNet.Identity.Service
{
    // Configure the application sign-in manager which is used in this application.
    public class ApplicationSignInManager : SignInManager<ApplicationUser, <#=config.UserPkType#>>
    {
        public ApplicationSignInManager(ApplicationUserManager userManager, IAuthenticationManager authenticationManager)
            : base(userManager, authenticationManager)
        {
        }

        public override Task<ClaimsIdentity> CreateUserIdentityAsync(ApplicationUser user)
        {
            return user.GenerateUserIdentityAsync((ApplicationUserManager)UserManager);
        }

        public static ApplicationSignInManager Create(IdentityFactoryOptions<ApplicationSignInManager> options, IOwinContext context)
        {
            return new ApplicationSignInManager(context.GetUserManager<ApplicationUserManager>(), context.Authentication);
        }
    }
}
