
using System;
using System.Threading;

namespace Locust.Calendar
{
    public class AutoGeneratedDateTimeField
    {
		public bool HasValue { get; protected set; }

        private void initExclusive(DateTimeValue dateValue)
        {
					if (!(dateValue is PersianDateValue) && persian != null)
            {
                dateValue.Read(persian.ToDateTime());
				HasValue = true;
                return;
            }
					if (!(dateValue is GregorianDateValue) && gregorian != null)
            {
                dateValue.Read(gregorian.ToDateTime());
				HasValue = true;
                return;
            }
					if (!(dateValue is HijriDateValue) && hijri != null)
            {
                dateValue.Read(hijri.ToDateTime());
				HasValue = true;
                return;
            }
		        }
				private PersianDateValue persian;
        public PersianDateValue Persian
        {
            get
            {
                return LazyInitializer.EnsureInitialized<PersianDateValue>(ref persian, () =>
                {
                    var result = new PersianDateValue();

                    initExclusive(result);

                    result.DateChanged += OnDateChanged;

                    return result;
                });
            }
        }
				private GregorianDateValue gregorian;
        public GregorianDateValue Gregorian
        {
            get
            {
                return LazyInitializer.EnsureInitialized<GregorianDateValue>(ref gregorian, () =>
                {
                    var result = new GregorianDateValue();

                    initExclusive(result);

                    result.DateChanged += OnDateChanged;

                    return result;
                });
            }
        }
				private HijriDateValue hijri;
        public HijriDateValue Hijri
        {
            get
            {
                return LazyInitializer.EnsureInitialized<HijriDateValue>(ref hijri, () =>
                {
                    var result = new HijriDateValue();

                    initExclusive(result);

                    result.DateChanged += OnDateChanged;

                    return result;
                });
            }
        }
		        						        private void OnDateChanged(DateTimeValue x)
        {
			HasValue = true;

            DateTime date = DateTime.Now;

			if (1 == 0) { }
					else if (x is PersianDateValue)
            {
                date = Persian.ToDateTime();
            }
					else if (x is GregorianDateValue)
            {
                date = Gregorian.ToDateTime();
            }
					else if (x is HijriDateValue)
            {
                date = Hijri.ToDateTime();
            }
		            
					if (persian != null && !(x is PersianDateValue))
            {
                Persian.DateChanged -= OnDateChanged;
                Persian.Read(date);
            }
					if (gregorian != null && !(x is GregorianDateValue))
            {
                Gregorian.DateChanged -= OnDateChanged;
                Gregorian.Read(date);
            }
					if (hijri != null && !(x is HijriDateValue))
            {
                Hijri.DateChanged -= OnDateChanged;
                Hijri.Read(date);
            }
		            
					if (persian != null && !(x is PersianDateValue))
                Persian.DateChanged += OnDateChanged;
					if (gregorian != null && !(x is GregorianDateValue))
                Gregorian.DateChanged += OnDateChanged;
					if (hijri != null && !(x is HijriDateValue))
                Hijri.DateChanged += OnDateChanged;
		        }
        public static explicit operator AutoGeneratedDateTimeField(DateTime date)
        {
            var dtf = new AutoGeneratedDateTimeField();

            dtf.Gregorian.Read(date);

            return dtf;
        }
        public static implicit operator DateTime(AutoGeneratedDateTimeField dtf)
        {
            return dtf.Gregorian.ToDateTime();
        }
    }
}
