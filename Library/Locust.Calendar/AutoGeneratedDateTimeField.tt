<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Locust\Library\Locust.Extensions\bin\Debug\Locust.Extensions.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Locust.Extensions" #>

<#@ output extension=".cs" #>
<#
	var calendars = new string[] {
		"persian"
		,"gregorian"
		//,"julian"
		//,"hebrew"
		,"hijri"
		//,"korean"
		//,"japanese"
		//,"taiwan"
		//,"koreanLunisolar"
		//,"japaneseLunisolar"
		//,"taiwanLunisolar"
		//,"chineseLunisolar"
	};
#>
using System;
using System.Threading;

namespace Locust.Calendar
{
    public class AutoGeneratedDateTimeField
    {
		public bool HasValue { get; protected set; }

        private void initExclusive(DateTimeValue dateValue)
        {
		<#
			foreach (var item in calendars)
			{ #>
			if (!(dateValue is <#=item.Capitalize()#>DateValue) && <#=item#> != null)
            {
                dateValue.Read(<#=item#>.ToDateTime());
				HasValue = true;
                return;
            }
		<#	} #>
        }
		<#
			foreach (var item in calendars)
			{ #>
		private <#=item.Capitalize()#>DateValue <#=item#>;
        public <#=item.Capitalize()#>DateValue <#=item.Capitalize()#>
        {
            get
            {
                return LazyInitializer.EnsureInitialized<<#=item.Capitalize()#>DateValue>(ref <#=item#>, () =>
                {
                    var result = new <#=item.Capitalize()#>DateValue();

                    initExclusive(result);

                    result.DateChanged += OnDateChanged;

                    return result;
                });
            }
        }
		<#	} #>
        <#  foreach (var item in calendars)
			{ #>
		<#	} #>
        private void OnDateChanged(DateTimeValue x)
        {
			HasValue = true;

            DateTime date = DateTime.Now;

			if (1 == 0) { }
		<#  foreach (var item in calendars)
			{ #>
			else if (x is <#=item.Capitalize()#>DateValue)
            {
                date = <#=item.Capitalize()#>.ToDateTime();
            }
		<#	} #>
            
		<#  foreach (var item in calendars)
			{ #>
			if (<#=item#> != null && !(x is <#=item.Capitalize()#>DateValue))
            {
                <#=item.Capitalize()#>.DateChanged -= OnDateChanged;
                <#=item.Capitalize()#>.Read(date);
            }
		<#	} #>
            
		<#  foreach (var item in calendars)
			{ #>
			if (<#=item#> != null && !(x is <#=item.Capitalize()#>DateValue))
                <#=item.Capitalize()#>.DateChanged += OnDateChanged;
		<#	} #>
        }
        public static explicit operator AutoGeneratedDateTimeField(DateTime date)
        {
            var dtf = new AutoGeneratedDateTimeField();

            dtf.Gregorian.Read(date);

            return dtf;
        }
        public static implicit operator DateTime(AutoGeneratedDateTimeField dtf)
        {
            return dtf.Gregorian.ToDateTime();
        }
    }
}
