using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Locust.Extensions;

namespace Locust.Calendar
{
    public static class CalendarExtensions
    {
        public static bool IsDateTimeField(this Type type)
        {
            return type == TypeHelper.TypeOfDateTimeField ||
                   type.DescendsFrom(TypeHelper.TypeOfDateTimeField) ||
                   type == TypeHelper.TypeOfAutoGeneratedDateTimeField ||
                   type.DescendsFrom(TypeHelper.TypeOfAutoGeneratedDateTimeField);
        }
        public static int Year(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse<Calendars>(calendar, true, out _calendar))
            {
                return d.Year(_calendar);
            }

            return 0;
        }
        public static string GetFullDate(this DateTimeField d, string calendar)
        {
            return d.Year(calendar) + "/" + d.Month(calendar) + "/" + d.Day(calendar) + " " + d.Hour(calendar) + ":" + d.Minute(calendar) + ":" + d.Second(calendar);
        }
        public static int Month(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse(calendar, true, out _calendar))
            {
                return d.Month(_calendar);
            }

            return 0;
        }
        public static int Day(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse(calendar, true, out _calendar))
            {
                return d.Day(_calendar);
            }

            return 0;
        }
        public static System.DayOfWeek DayOfWeek(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse(calendar, true, out _calendar))
            {
                return d.DayOfWeek(_calendar);
            }

            return System.DayOfWeek.Saturday;
        }
        public static int Hour(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse(calendar, true, out _calendar))
            {
                return d.Hour(_calendar);
            }

            return 0;
        }
        public static int Minute(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse(calendar, true, out _calendar))
            {
                return d.Minute(_calendar);
            }

            return 0;
        }
        public static int Second(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse(calendar, true, out _calendar))
            {
                return d.Second(_calendar);
            }

            return 0;
        }
        public static int Millisecond(this DateTimeField d, string calendar)
        {
            Calendars _calendar;

            if (Enum.TryParse(calendar, true, out _calendar))
            {
                return d.Millisecond(_calendar);
            }

            return 0;
        }
    }
}
