using Locust.Service;
using Locust.Service.Moon;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
@foreach (var _using in Model.Usings)
{
<text>using @(_using);</text>
}

namespace @Model.Namespace
{
	public partial interface I@(Model.Service)
    {
        @(Model.Service)Config Config { get; }
@foreach (var action in Model.Actions)
{
	if (!string.IsNullOrEmpty(action.Name))
	{
        <text>@(Model.Service + action.Name)BaseAction @action.Name { get; }</text>
	}
}
    }
    public partial class @(Model.Service)Config: BaseConfig
    {
    }

	public abstract partial class @(Model.Service)Base : BaseActionBasedService<@(Model.Service)Config>, I@(Model.Service)
    {
@foreach (var action in Model.Actions)
{
	if (!string.IsNullOrEmpty(action.Name))
	{
        <text>public abstract @(Model.Service + action.Name)BaseAction @action.Name { get; protected set; }</text>
	}
}

        public @(Model.Service)Base(@(Model.Service)Config config): base(config)
        {
        }
    }

	public partial class @(Model.Service + "Default") : @(Model.Service)Base
    {
@foreach (var action in Model.Actions)
{
	if (!string.IsNullOrEmpty(action.Name))
	{
        <text>public override @(Model.Service + action.Name)BaseAction @action.Name { get; protected set; }</text>
	}
}

        public @(Model.Service + "Default")(@(Model.Service)Config config): base(config)
        {
@foreach (var action in Model.Actions)
{
	if (!string.IsNullOrEmpty(action.Name))
	{
            <text>@action.Name = new @(Model.Service + "Default" + action.Name)Action(this);</text>
            <text>Actions.Add("@action.Name", @action.Name);</text>
	}
}
        }
    }

@foreach (var action in Model.Actions)
{
	if (!string.IsNullOrEmpty(action.Name))
	{
    <text>#region @action.Name</text>
    <text>public partial class @(Model.Service + action.Name)Request : ServiceRequest</text>
    <text>{ }</text>
    <text>public partial class @(Model.Service + action.Name)Response : @(string.IsNullOrEmpty(action.DataType) ? "ServiceResponse": Raw("ServiceResponse<" + action.DataType + ">"))</text>
    <text>{ }</text>
    
    <text>public abstract partial class @(Model.Service + action.Name)BaseAction:</text>
    <text>    BaseServiceAction<@(Model.Service)Base, @(Model.Service + action.Name)Request, @(Model.Service + action.Name)Response></text>
    <text>{</text>
    <text>    public @(Model.Service + action.Name)BaseAction(@(Model.Service)Base owner) : base(owner)</text>
    <text>    {</text>
    <text>    }</text>
    <text>}</text>
    <text>public partial class @(Model.Service + "Default" + action.Name)Action : @(Model.Service + action.Name)BaseAction</text>
    <text>{</text>
    <text>    public @(Model.Service + "Default" + action.Name)Action(@(Model.Service)Base owner) : base(owner)</text>
    <text>    {</text>
    <text>    }</text>
	<text>	partial void runInternal(@(Model.Service + action.Name)Request request, @(Model.Service + action.Name)Response response);</text>
    <text>    protected override void RunInternal(@(Model.Service + action.Name)Request request, @(Model.Service + action.Name)Response response)</text>
    <text>    {</text>
	<text>		runInternal(request, response);</text>
    <text>    }</text>
if (!Model.NoRunAsync)
{
    <text>    protected override Task RunInternalAsync(@(Model.Service + action.Name)Request request, @(Model.Service + action.Name)Response response, CancellationToken token)</text>
    <text>    {</text>
	<text>		RunInternal(request, response);</text>

	<text>		return Task.CompletedTask;</text>
    <text>    }</text>
}
	<text>}</text>
    <text>#endregion</text>
	}
}
}
